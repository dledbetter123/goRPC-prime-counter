// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: proto/primes.proto

package primespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileServer_GetFileChunk_FullMethodName = "/primes.FileServer/GetFileChunk"
	FileServer_Shutdown_FullMethodName     = "/primes.FileServer/Shutdown"
)

// FileServerClient is the client API for FileServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerClient interface {
	GetFileChunk(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (FileServer_GetFileChunkClient, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*Ack, error)
}

type fileServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerClient(cc grpc.ClientConnInterface) FileServerClient {
	return &fileServerClient{cc}
}

func (c *fileServerClient) GetFileChunk(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (FileServer_GetFileChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServer_ServiceDesc.Streams[0], FileServer_GetFileChunk_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerGetFileChunkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileServer_GetFileChunkClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type fileServerGetFileChunkClient struct {
	grpc.ClientStream
}

func (x *fileServerGetFileChunkClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, FileServer_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerServer is the server API for FileServer service.
// All implementations must embed UnimplementedFileServerServer
// for forward compatibility
type FileServerServer interface {
	GetFileChunk(*JobRequest, FileServer_GetFileChunkServer) error
	Shutdown(context.Context, *ShutdownRequest) (*Ack, error)
	mustEmbedUnimplementedFileServerServer()
}

// UnimplementedFileServerServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerServer struct {
}

func (UnimplementedFileServerServer) GetFileChunk(*JobRequest, FileServer_GetFileChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFileChunk not implemented")
}
func (UnimplementedFileServerServer) Shutdown(context.Context, *ShutdownRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedFileServerServer) mustEmbedUnimplementedFileServerServer() {}

// UnsafeFileServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerServer will
// result in compilation errors.
type UnsafeFileServerServer interface {
	mustEmbedUnimplementedFileServerServer()
}

func RegisterFileServerServer(s grpc.ServiceRegistrar, srv FileServerServer) {
	s.RegisterService(&FileServer_ServiceDesc, srv)
}

func _FileServer_GetFileChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServerServer).GetFileChunk(m, &fileServerGetFileChunkServer{stream})
}

type FileServer_GetFileChunkServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type fileServerGetFileChunkServer struct {
	grpc.ServerStream
}

func (x *fileServerGetFileChunkServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _FileServer_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileServer_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServer_ServiceDesc is the grpc.ServiceDesc for FileServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "primes.FileServer",
	HandlerType: (*FileServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shutdown",
			Handler:    _FileServer_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFileChunk",
			Handler:       _FileServer_GetFileChunk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/primes.proto",
}

const (
	Dispatcher_GetJob_FullMethodName           = "/primes.Dispatcher/GetJob"
	Dispatcher_RegisterWorker_FullMethodName   = "/primes.Dispatcher/RegisterWorker"
	Dispatcher_ReportCompletion_FullMethodName = "/primes.Dispatcher/ReportCompletion"
	Dispatcher_ShutdownSignal_FullMethodName   = "/primes.Dispatcher/ShutdownSignal"
)

// DispatcherClient is the client API for Dispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherClient interface {
	GetJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*Job, error)
	RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*WorkerID, error)
	ReportCompletion(ctx context.Context, in *JobCompletion, opts ...grpc.CallOption) (*Ack, error)
	ShutdownSignal(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*Ack, error)
}

type dispatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherClient(cc grpc.ClientConnInterface) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) GetJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, Dispatcher_GetJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*WorkerID, error) {
	out := new(WorkerID)
	err := c.cc.Invoke(ctx, Dispatcher_RegisterWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) ReportCompletion(ctx context.Context, in *JobCompletion, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, Dispatcher_ReportCompletion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) ShutdownSignal(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, Dispatcher_ShutdownSignal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherServer is the server API for Dispatcher service.
// All implementations must embed UnimplementedDispatcherServer
// for forward compatibility
type DispatcherServer interface {
	GetJob(context.Context, *JobRequest) (*Job, error)
	RegisterWorker(context.Context, *RegisterWorkerRequest) (*WorkerID, error)
	ReportCompletion(context.Context, *JobCompletion) (*Ack, error)
	ShutdownSignal(context.Context, *ShutdownRequest) (*Ack, error)
	mustEmbedUnimplementedDispatcherServer()
}

// UnimplementedDispatcherServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherServer struct {
}

func (UnimplementedDispatcherServer) GetJob(context.Context, *JobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedDispatcherServer) RegisterWorker(context.Context, *RegisterWorkerRequest) (*WorkerID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedDispatcherServer) ReportCompletion(context.Context, *JobCompletion) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCompletion not implemented")
}
func (UnimplementedDispatcherServer) ShutdownSignal(context.Context, *ShutdownRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownSignal not implemented")
}
func (UnimplementedDispatcherServer) mustEmbedUnimplementedDispatcherServer() {}

// UnsafeDispatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherServer will
// result in compilation errors.
type UnsafeDispatcherServer interface {
	mustEmbedUnimplementedDispatcherServer()
}

func RegisterDispatcherServer(s grpc.ServiceRegistrar, srv DispatcherServer) {
	s.RegisterService(&Dispatcher_ServiceDesc, srv)
}

func _Dispatcher_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispatcher_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).GetJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispatcher_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).RegisterWorker(ctx, req.(*RegisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_ReportCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCompletion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).ReportCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispatcher_ReportCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).ReportCompletion(ctx, req.(*JobCompletion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_ShutdownSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).ShutdownSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispatcher_ShutdownSignal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).ShutdownSignal(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dispatcher_ServiceDesc is the grpc.ServiceDesc for Dispatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dispatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "primes.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _Dispatcher_GetJob_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _Dispatcher_RegisterWorker_Handler,
		},
		{
			MethodName: "ReportCompletion",
			Handler:    _Dispatcher_ReportCompletion_Handler,
		},
		{
			MethodName: "ShutdownSignal",
			Handler:    _Dispatcher_ShutdownSignal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/primes.proto",
}

const (
	Consolidator_SendResult_FullMethodName = "/primes.Consolidator/SendResult"
	Consolidator_Shutdown_FullMethodName   = "/primes.Consolidator/Shutdown"
)

// ConsolidatorClient is the client API for Consolidator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsolidatorClient interface {
	SendResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Ack, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*Ack, error)
}

type consolidatorClient struct {
	cc grpc.ClientConnInterface
}

func NewConsolidatorClient(cc grpc.ClientConnInterface) ConsolidatorClient {
	return &consolidatorClient{cc}
}

func (c *consolidatorClient) SendResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, Consolidator_SendResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consolidatorClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, Consolidator_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsolidatorServer is the server API for Consolidator service.
// All implementations must embed UnimplementedConsolidatorServer
// for forward compatibility
type ConsolidatorServer interface {
	SendResult(context.Context, *Result) (*Ack, error)
	Shutdown(context.Context, *ShutdownRequest) (*Ack, error)
	mustEmbedUnimplementedConsolidatorServer()
}

// UnimplementedConsolidatorServer must be embedded to have forward compatible implementations.
type UnimplementedConsolidatorServer struct {
}

func (UnimplementedConsolidatorServer) SendResult(context.Context, *Result) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResult not implemented")
}
func (UnimplementedConsolidatorServer) Shutdown(context.Context, *ShutdownRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedConsolidatorServer) mustEmbedUnimplementedConsolidatorServer() {}

// UnsafeConsolidatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsolidatorServer will
// result in compilation errors.
type UnsafeConsolidatorServer interface {
	mustEmbedUnimplementedConsolidatorServer()
}

func RegisterConsolidatorServer(s grpc.ServiceRegistrar, srv ConsolidatorServer) {
	s.RegisterService(&Consolidator_ServiceDesc, srv)
}

func _Consolidator_SendResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsolidatorServer).SendResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consolidator_SendResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsolidatorServer).SendResult(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consolidator_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsolidatorServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consolidator_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsolidatorServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Consolidator_ServiceDesc is the grpc.ServiceDesc for Consolidator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consolidator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "primes.Consolidator",
	HandlerType: (*ConsolidatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendResult",
			Handler:    _Consolidator_SendResult_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Consolidator_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/primes.proto",
}
